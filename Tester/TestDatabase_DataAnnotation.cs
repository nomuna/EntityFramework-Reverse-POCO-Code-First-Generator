

// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).
// Created by Simon Hughes (https://about.me/simon.hughes).
//
// Do not make changes directly to this file - edit the template instead.
//
// The following connection settings were used to generate this file:
//     Configuration file:     "Tester\App.config"
//     Connection String Name: "TestDatabase"
//     Connection String:      "Data Source=(local);Initial Catalog=EfrpgTest;Integrated Security=True;Application Name=EntityFramework Reverse POCO Generator"
// ------------------------------------------------------------------------------------------------
// Database Edition       : Developer Edition (64-bit)
// Database Engine Edition: Enterprise

// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.5
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace TestDatabaseDataAnnotation
{
    using System.Linq;

    #region Unit of work

    public interface ITestDbContext : System.IDisposable
    {
        System.Data.Entity.DbSet<ColumnName> ColumnNames { get; set; } // ColumnNames
        System.Data.Entity.DbSet<Stafford_Boo> Stafford_Boos { get; set; } // Boo
        System.Data.Entity.DbSet<Stafford_ComputedColumn> Stafford_ComputedColumns { get; set; } // ComputedColumns
        System.Data.Entity.DbSet<Stafford_Foo> Stafford_Foos { get; set; } // Foo
        System.Data.Entity.DbSet<Synonyms_Child> Synonyms_Children { get; set; } // Child
        System.Data.Entity.DbSet<Synonyms_Parent> Synonyms_Parents { get; set; } // Parent
        System.Data.Entity.DbSet<UserInfo> UserInfoes { get; set; } // UserInfo
        System.Data.Entity.DbSet<UserInfoAttribute> UserInfoAttributes { get; set; } // UserInfoAttributes

        int SaveChanges();
        System.Threading.Tasks.Task<int> SaveChangesAsync();
        System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken);
        System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get; }
        System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get; }
        System.Data.Entity.Database Database { get; }
        System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;
        System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity);
        System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors();
        System.Data.Entity.DbSet Set(System.Type entityType);
        System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();

        // Stored Procedures
        System.Collections.Generic.List<Synonyms_SimpleStoredProcReturnModel> Synonyms_SimpleStoredProc(int? inputInt);
        System.Collections.Generic.List<Synonyms_SimpleStoredProcReturnModel> Synonyms_SimpleStoredProc(int? inputInt, out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<Synonyms_SimpleStoredProcReturnModel>> Synonyms_SimpleStoredProcAsync(int? inputInt);


        // Table Valued Functions
        [System.Data.Entity.DbFunction("TestDbContext", "CsvToInt")]
        [CodeFirstStoreFunctions.DbFunctionDetails(DatabaseSchema = "dbo", ResultColumnName = "IntValue")]
        System.Linq.IQueryable<CsvToIntReturnModel> CsvToInt(string array, string array2);
    }

    #endregion

    #region Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class TestDbContext : System.Data.Entity.DbContext, ITestDbContext
    {
        public System.Data.Entity.DbSet<ColumnName> ColumnNames { get; set; } // ColumnNames
        public System.Data.Entity.DbSet<Stafford_Boo> Stafford_Boos { get; set; } // Boo
        public System.Data.Entity.DbSet<Stafford_ComputedColumn> Stafford_ComputedColumns { get; set; } // ComputedColumns
        public System.Data.Entity.DbSet<Stafford_Foo> Stafford_Foos { get; set; } // Foo
        public System.Data.Entity.DbSet<Synonyms_Child> Synonyms_Children { get; set; } // Child
        public System.Data.Entity.DbSet<Synonyms_Parent> Synonyms_Parents { get; set; } // Parent
        public System.Data.Entity.DbSet<UserInfo> UserInfoes { get; set; } // UserInfo
        public System.Data.Entity.DbSet<UserInfoAttribute> UserInfoAttributes { get; set; } // UserInfoAttributes

        static TestDbContext()
        {
            System.Data.Entity.Database.SetInitializer<TestDbContext>(null);
        }

        public TestDbContext()
            : base("Name=TestDatabase")
        {
        }

        public TestDbContext(string connectionString)
            : base(connectionString)
        {
        }

        public TestDbContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
        }

        public TestDbContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
        }

        public TestDbContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Conventions.Add(new CodeFirstStoreFunctions.FunctionsConvention<TestDbContext>("dbo"));
            modelBuilder.ComplexType<CsvToIntReturnModel>();

            modelBuilder.Configurations.Add(new ColumnNameConfiguration());
            modelBuilder.Configurations.Add(new Stafford_BooConfiguration());
            modelBuilder.Configurations.Add(new Stafford_ComputedColumnConfiguration());
            modelBuilder.Configurations.Add(new Stafford_FooConfiguration());
            modelBuilder.Configurations.Add(new Synonyms_ChildConfiguration());
            modelBuilder.Configurations.Add(new Synonyms_ParentConfiguration());
            modelBuilder.Configurations.Add(new UserInfoConfiguration());
            modelBuilder.Configurations.Add(new UserInfoAttributeConfiguration());
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new ColumnNameConfiguration(schema));
            modelBuilder.Configurations.Add(new Stafford_BooConfiguration(schema));
            modelBuilder.Configurations.Add(new Stafford_ComputedColumnConfiguration(schema));
            modelBuilder.Configurations.Add(new Stafford_FooConfiguration(schema));
            modelBuilder.Configurations.Add(new Synonyms_ChildConfiguration(schema));
            modelBuilder.Configurations.Add(new Synonyms_ParentConfiguration(schema));
            modelBuilder.Configurations.Add(new UserInfoConfiguration(schema));
            modelBuilder.Configurations.Add(new UserInfoAttributeConfiguration(schema));
            return modelBuilder;
        }

        // Stored Procedures
        public System.Collections.Generic.List<Synonyms_SimpleStoredProcReturnModel> Synonyms_SimpleStoredProc(int? inputInt)
        {
            int procResult;
            return Synonyms_SimpleStoredProc(inputInt, out procResult);
        }

        public System.Collections.Generic.List<Synonyms_SimpleStoredProcReturnModel> Synonyms_SimpleStoredProc(int? inputInt, out int procResult)
        {
            var inputIntParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@InputInt", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = inputInt.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!inputInt.HasValue)
                inputIntParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<Synonyms_SimpleStoredProcReturnModel>("EXEC @procResult = [Synonyms].[SimpleStoredProc] @InputInt", inputIntParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<Synonyms_SimpleStoredProcReturnModel>> Synonyms_SimpleStoredProcAsync(int? inputInt)
        {
            var inputIntParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@InputInt", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Input, Value = inputInt.GetValueOrDefault(), Precision = 10, Scale = 0 };
            if (!inputInt.HasValue)
                inputIntParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<Synonyms_SimpleStoredProcReturnModel>("EXEC [Synonyms].[SimpleStoredProc] @InputInt", inputIntParam).ToListAsync();

            return procResultData;
        }

        // Table Valued Functions
        [System.Data.Entity.DbFunction("TestDbContext", "CsvToInt")]
        [CodeFirstStoreFunctions.DbFunctionDetails(DatabaseSchema = "dbo", ResultColumnName = "IntValue")]
        public IQueryable<CsvToIntReturnModel> CsvToInt(string array, string array2)
        {
            var arrayParam = new System.Data.Entity.Core.Objects.ObjectParameter("array", typeof(string)) { Value = (object)array };
            var array2Param = new System.Data.Entity.Core.Objects.ObjectParameter("array2", typeof(string)) { Value = (object)array2 };

            return ((System.Data.Entity.Infrastructure.IObjectContextAdapter)this).ObjectContext.CreateQuery<CsvToIntReturnModel>("[TestDbContext].[CsvToInt](@array, @array2)", arrayParam, array2Param);
        }

    }
    #endregion

    #region Database context factory

    public class TestDbContextFactory : System.Data.Entity.Infrastructure.IDbContextFactory<TestDbContext>
    {
        public TestDbContext Create()
        {
            return new TestDbContext();
        }
    }

    #endregion

    #region Fake Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class FakeTestDbContext : ITestDbContext
    {
        public System.Data.Entity.DbSet<ColumnName> ColumnNames { get; set; }
        public System.Data.Entity.DbSet<Stafford_Boo> Stafford_Boos { get; set; }
        public System.Data.Entity.DbSet<Stafford_ComputedColumn> Stafford_ComputedColumns { get; set; }
        public System.Data.Entity.DbSet<Stafford_Foo> Stafford_Foos { get; set; }
        public System.Data.Entity.DbSet<Synonyms_Child> Synonyms_Children { get; set; }
        public System.Data.Entity.DbSet<Synonyms_Parent> Synonyms_Parents { get; set; }
        public System.Data.Entity.DbSet<UserInfo> UserInfoes { get; set; }
        public System.Data.Entity.DbSet<UserInfoAttribute> UserInfoAttributes { get; set; }

        public FakeTestDbContext()
        {
            _changeTracker = null;
            _configuration = null;
            _database = null;

            ColumnNames = new FakeDbSet<ColumnName>("C36");
            Stafford_Boos = new FakeDbSet<Stafford_Boo>("Id");
            Stafford_ComputedColumns = new FakeDbSet<Stafford_ComputedColumn>("Id");
            Stafford_Foos = new FakeDbSet<Stafford_Foo>("Id");
            Synonyms_Children = new FakeDbSet<Synonyms_Child>("ChildId");
            Synonyms_Parents = new FakeDbSet<Synonyms_Parent>("ParentId");
            UserInfoes = new FakeDbSet<UserInfo>("Id");
            UserInfoAttributes = new FakeDbSet<UserInfoAttribute>("Id");
        }

        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        private System.Data.Entity.Infrastructure.DbChangeTracker _changeTracker;
        public System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get { return _changeTracker; } }
        private System.Data.Entity.Infrastructure.DbContextConfiguration _configuration;
        public System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get { return _configuration; } }
        private System.Data.Entity.Database _database;
        public System.Data.Entity.Database Database { get { return _database; } }
        public System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity)
        {
            throw new System.NotImplementedException();
        }
        public System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors()
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet Set(System.Type entityType)
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public override string ToString()
        {
            throw new System.NotImplementedException();
        }


        // Stored Procedures
        public System.Collections.Generic.List<Synonyms_SimpleStoredProcReturnModel> Synonyms_SimpleStoredProc(int? inputInt)
        {
            int procResult;
            return Synonyms_SimpleStoredProc(inputInt, out procResult);
        }

        public System.Collections.Generic.List<Synonyms_SimpleStoredProcReturnModel> Synonyms_SimpleStoredProc(int? inputInt, out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<Synonyms_SimpleStoredProcReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<Synonyms_SimpleStoredProcReturnModel>> Synonyms_SimpleStoredProcAsync(int? inputInt)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(Synonyms_SimpleStoredProc(inputInt, out procResult));
        }

        // Table Valued Functions
        [System.Data.Entity.DbFunction("TestDbContext", "CsvToInt")]
        public IQueryable<CsvToIntReturnModel> CsvToInt(string array, string array2)
        {
            return new System.Collections.Generic.List<CsvToIntReturnModel>().AsQueryable();
        }

    }

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class FakeDbSet<TEntity> : System.Data.Entity.DbSet<TEntity>, IQueryable, System.Collections.Generic.IEnumerable<TEntity>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity> where TEntity : class
    {
        private readonly System.Reflection.PropertyInfo[] _primaryKeys;
        private readonly System.Collections.ObjectModel.ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;

        public FakeDbSet()
        {
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new System.ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new System.ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(System.Threading.CancellationToken cancellationToken, params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken);
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues));
        }

        public override System.Collections.Generic.IEnumerable<TEntity> AddRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Add(entity);
            }
            return items;
        }

        public override TEntity Add(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override System.Collections.Generic.IEnumerable<TEntity> RemoveRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Remove(entity);
            }
            return items;
        }

        public override TEntity Remove(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Remove(item);
            return item;
        }

        public override TEntity Attach(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override TEntity Create()
        {
            return System.Activator.CreateInstance<TEntity>();
        }

        public override TDerivedEntity Create<TDerivedEntity>()
        {
            return System.Activator.CreateInstance<TDerivedEntity>();
        }

        public override System.Collections.ObjectModel.ObservableCollection<TEntity> Local
        {
            get { return _data; }
        }

        System.Type IQueryable.ElementType
        {
            get { return _query.ElementType; }
        }

        System.Linq.Expressions.Expression IQueryable.Expression
        {
            get { return _query.Expression; }
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<TEntity>(_query.Provider); }
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Collections.Generic.IEnumerator<TEntity> System.Collections.Generic.IEnumerable<TEntity>.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator<TEntity> System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity>.GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<TEntity>(_data.GetEnumerator());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class FakeDbAsyncQueryProvider<TEntity> : System.Data.Entity.Infrastructure.IDbAsyncQueryProvider
    {
        private readonly IQueryProvider _inner;

        public FakeDbAsyncQueryProvider(IQueryProvider inner)
        {
            _inner = inner;
        }

        public IQueryable CreateQuery(System.Linq.Expressions.Expression expression)
        {
            var m = expression as System.Linq.Expressions.MethodCallExpression;
            if (m != null)
            {
                var resultType = m.Method.ReturnType; // it shoud be IQueryable<T>
                var tElement = resultType.GetGenericArguments()[0];
                var queryType = typeof(FakeDbAsyncEnumerable<>).MakeGenericType(tElement);
                return (IQueryable) System.Activator.CreateInstance(queryType, expression);
            }
            return new FakeDbAsyncEnumerable<TEntity>(expression);
        }

        public IQueryable<TElement> CreateQuery<TElement>(System.Linq.Expressions.Expression expression)
        {
            var queryType = typeof(FakeDbAsyncEnumerable<>).MakeGenericType(typeof(TElement));
            return (IQueryable<TElement>)System.Activator.CreateInstance(queryType, expression);
        }

        public object Execute(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute(expression);
        }

        public TResult Execute<TResult>(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute<TResult>(expression);
        }

        public System.Threading.Tasks.Task<object> ExecuteAsync(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute(expression));
        }

        public System.Threading.Tasks.Task<TResult> ExecuteAsync<TResult>(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute<TResult>(expression));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<T>, IQueryable<T>
    {
        public FakeDbAsyncEnumerable(System.Collections.Generic.IEnumerable<T> enumerable)
            : base(enumerable)
        { }

        public FakeDbAsyncEnumerable(System.Linq.Expressions.Expression expression)
            : base(expression)
        { }

        public System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T> GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator());
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator System.Data.Entity.Infrastructure.IDbAsyncEnumerable.GetAsyncEnumerator()
        {
            return GetAsyncEnumerator();
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<T>(this); }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class FakeDbAsyncEnumerator<T> : System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T>
    {
        private readonly System.Collections.Generic.IEnumerator<T> _inner;

        public FakeDbAsyncEnumerator(System.Collections.Generic.IEnumerator<T> inner)
        {
            _inner = inner;
        }

        public void Dispose()
        {
            _inner.Dispose();
        }

        public System.Threading.Tasks.Task<bool> MoveNextAsync(System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(_inner.MoveNext());
        }

        public T Current
        {
            get { return _inner.Current; }
        }

        object System.Data.Entity.Infrastructure.IDbAsyncEnumerator.Current
        {
            get { return Current; }
        }
    }

    #endregion

    #region POCO classes

    // ColumnNames
    ///<summary>
    /// This is to document the
    ///     table with poor column name choices
    ///</summary>
    [Table("ColumnNames", Schema = "dbo")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class ColumnName
    {
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"$", Order = 1, TypeName = "int")]
        [Index(@"PK_ColumnNames", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "")]
        public int C36 { get; set; } // $ (Primary key)

        [Column(@"%", Order = 2, TypeName = "int")]
        [Display(Name = "")]
        public int? C37 { get; set; } // %

        [Column(@"£", Order = 3, TypeName = "int")]
        [Display(Name = "")]
        public int? C163 { get; set; } // £

        ///<summary>
        /// Multi
        ///        Line
        ///    Comment
        ///</summary>
        [Column(@"&test$", Order = 4, TypeName = "int")]
        [Display(Name = "Test")]
        public int? C38Test36 { get; set; } // &test$

        [Column(@"abc/\", Order = 5, TypeName = "int")]
        [Display(Name = "Abc")]
        public int? Abc4792 { get; set; } // abc/\

        [Column(@"joe.bloggs", Order = 6, TypeName = "int")]
        [Display(Name = "Joe bloggs")]
        public int? Joe46Bloggs { get; set; } // joe.bloggs

        [Column(@"snake-case", Order = 7, TypeName = "int")]
        [Display(Name = "Snake case")]
        public int? SnakeCase { get; set; } // snake-case

        [Column(@"default_test", Order = 8, TypeName = "varchar")]
        [Required]
        [MaxLength(20)]
        [StringLength(20)]
        [Display(Name = "Default test")]
        public string DefaultTest { get; set; } // default_test (length: 20)

        [Column(@"someDate", Order = 9, TypeName = "datetime2")]
        [Required]
        [Display(Name = "Some date")]
        public System.DateTime SomeDate { get; set; } // someDate

        [Column(@"Obs", Order = 10, TypeName = "varchar")]
        [MaxLength(20)]
        [StringLength(20)]
        [Display(Name = "Obs")]
        public string Obs { get; set; } // Obs (length: 20)

        [Column(@"Slash1", Order = 11, TypeName = "varchar")]
        [MaxLength(20)]
        [StringLength(20)]
        [Display(Name = "Slash 1")]
        public string Slash1 { get; set; } // Slash1 (length: 20)

        [Column(@"Slash2", Order = 12, TypeName = "varchar")]
        [MaxLength(20)]
        [StringLength(20)]
        [Display(Name = "Slash 2")]
        public string Slash2 { get; set; } // Slash2 (length: 20)

        [Column(@"Slash3", Order = 13, TypeName = "varchar")]
        [MaxLength(20)]
        [StringLength(20)]
        [Display(Name = "Slash 3")]
        public string Slash3 { get; set; } // Slash3 (length: 20)

        [Column(@"static", Order = 14, TypeName = "int")]
        [Display(Name = "Static")]
        public int? @Static { get; set; } // static

        [Column(@"readonly", Order = 15, TypeName = "int")]
        [Display(Name = "Readonly")]
        public int? @Readonly { get; set; } // readonly

        [Column(@"123Hi", Order = 16, TypeName = "int")]
        [Display(Name = "123 Hi")]
        public int? C123Hi { get; set; } // 123Hi

        [Column(@"afloat", Order = 17, TypeName = "real")]
        [Display(Name = "Afloat")]
        public float? Afloat { get; set; } // afloat

        [Column(@"adouble", Order = 18, TypeName = "float")]
        [Display(Name = "Adouble")]
        public double? Adouble { get; set; } // adouble

        public ColumnName()
        {
            DefaultTest = "";
            SomeDate = System.DateTime.Now;
            Obs = "[{\"k\":\"en\",\"v\":\"\"},{\"k\":\"pt\",\"v\":\"\"}]";
            Slash1 = @"\";
            Slash2 = @"\\";
            Slash3 = @"\\\";
            Afloat = 1.23f;
            Adouble = 999.0;
        }
    }

    // The table 'NoPrimaryKeys' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // NoPrimaryKeys
    [NotMapped]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class NoPrimaryKey
    {
        [Column(@"Id", Order = 1, TypeName = "int")]
        [Display(Name = "Id")]
        public int? Id { get; set; } // Id

        [Column(@"Description", Order = 2, TypeName = "varchar")]
        [MaxLength(10)]
        [StringLength(10)]
        [Display(Name = "Description")]
        public string Description { get; set; } // Description (length: 10)
    }

    // Boo
    [Table("Boo", Schema = "Stafford")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class Stafford_Boo
    {
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"id", Order = 1, TypeName = "int")]
        [Index(@"PK_Boo", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Id")]
        public int Id { get; set; } // id (Primary key)

        [Column(@"name", Order = 2, TypeName = "nchar")]
        [Required]
        [MaxLength(10)]
        [StringLength(10)]
        [Display(Name = "Name")]
        public string Name { get; set; } // name (length: 10)

        // Reverse navigation

        /// <summary>
        /// Parent (One-to-One) Stafford_Boo pointed by [Foo].[id] (FK_Foo_Boo)
        /// </summary>
        public virtual Stafford_Foo Stafford_Foo { get; set; } // Foo.FK_Foo_Boo
    }

    // ComputedColumns
    [Table("ComputedColumns", Schema = "Stafford")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class Stafford_ComputedColumn
    {
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"Id", Order = 1, TypeName = "int")]
        [Index(@"PK_Stafford_ComputedColumns", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Id")]
        public int Id { get; set; } // Id (Primary key)

        [Column(@"MyColumn", Order = 2, TypeName = "varchar")]
        [Required]
        [MaxLength(10)]
        [StringLength(10)]
        [Display(Name = "My column")]
        public string MyColumn { get; set; } // MyColumn (length: 10)

        [DatabaseGenerated(DatabaseGeneratedOption.Computed)]
        [Column(@"MyComputedColumn", Order = 3, TypeName = "varchar")]
        [MaxLength(10)]
        [StringLength(10)]
        [Display(Name = "My computed column")]
        public string MyComputedColumn { get; private set; } // MyComputedColumn (length: 10)
    }

    // Foo
    [Table("Foo", Schema = "Stafford")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class Stafford_Foo
    {
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"id", Order = 1, TypeName = "int")]
        [Index(@"PK_Foo", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Id")]
        [ForeignKey("Stafford_Boo")]
        public int Id { get; set; } // id (Primary key)

        [Column(@"name", Order = 2, TypeName = "nchar")]
        [Required]
        [MaxLength(10)]
        [StringLength(10)]
        [Display(Name = "Name")]
        public string Name { get; set; } // name (length: 10)

        // Foreign keys

        /// <summary>
        /// Parent Stafford_Boo pointed by [Foo].([Id]) (FK_Foo_Boo)
        /// </summary>
        [ForeignKey("Id"), Required] public virtual Stafford_Boo Stafford_Boo { get; set; } // FK_Foo_Boo
    }

    // Child
    [Table("Child", Schema = "Synonyms")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class Synonyms_Child
    {
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"ChildId", Order = 1, TypeName = "int")]
        [Index(@"PK_Child", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Child ID")]
        public int ChildId { get; set; } // ChildId (Primary key)

        [Column(@"ParentId", Order = 2, TypeName = "int")]
        [Required]
        [Display(Name = "Parent ID")]
        public int ParentId { get; set; } // ParentId

        [Column(@"ChildName", Order = 3, TypeName = "varchar")]
        [MaxLength(100)]
        [StringLength(100)]
        [Display(Name = "Child name")]
        public string ChildName { get; set; } // ChildName (length: 100)

        // Foreign keys

        /// <summary>
        /// Parent Synonyms_Parent pointed by [Child].([ParentId]) (FK_Child_Parent)
        /// </summary>
        [ForeignKey("ParentId"), Required] public virtual Synonyms_Parent Synonyms_Parent { get; set; } // FK_Child_Parent
    }

    // Parent
    [Table("Parent", Schema = "Synonyms")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class Synonyms_Parent
    {
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"ParentId", Order = 1, TypeName = "int")]
        [Index(@"PK_Parent", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Parent ID")]
        public int ParentId { get; set; } // ParentId (Primary key)

        [Column(@"ParentName", Order = 2, TypeName = "varchar")]
        [Required]
        [MaxLength(100)]
        [StringLength(100)]
        [Display(Name = "Parent name")]
        public string ParentName { get; set; } // ParentName (length: 100)

        // Reverse navigation

        /// <summary>
        /// Child Synonyms_Children where [Child].[ParentId] point to this entity (FK_Child_Parent)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Synonyms_Child> Synonyms_Children { get; set; } // Child.FK_Child_Parent

        public Synonyms_Parent()
        {
            Synonyms_Children = new System.Collections.Generic.List<Synonyms_Child>();
        }
    }

    // UserInfo
    [Table("UserInfo", Schema = "dbo")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class UserInfo
    {
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"Id", Order = 1, TypeName = "int")]
        [Index(@"PK_UserInfo", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Id")]
        public int Id { get; set; } // Id (Primary key)

        // Reverse navigation

        /// <summary>
        /// Child UserInfoAttributes where [UserInfoAttributes].[PrimaryId] point to this entity (FK_UserInfoAttributes_PrimaryUserInfo)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<UserInfoAttribute> UserInfoAttributes_PrimaryId { get; set; } // UserInfoAttributes.FK_UserInfoAttributes_PrimaryUserInfo
        /// <summary>
        /// Child UserInfoAttributes where [UserInfoAttributes].[SecondaryId] point to this entity (FK_UserInfoAttributes_SecondaryUserInfo)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<UserInfoAttribute> UserInfoAttributes_SecondaryId { get; set; } // UserInfoAttributes.FK_UserInfoAttributes_SecondaryUserInfo

        public UserInfo()
        {
            UserInfoAttributes_PrimaryId = new System.Collections.Generic.List<UserInfoAttribute>();
            UserInfoAttributes_SecondaryId = new System.Collections.Generic.List<UserInfoAttribute>();
        }
    }

    // UserInfoAttributes
    [Table("UserInfoAttributes", Schema = "dbo")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class UserInfoAttribute
    {
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"Id", Order = 1, TypeName = "int")]
        [Index(@"PK_UserInfoAttributes", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Id")]
        public int Id { get; set; } // Id (Primary key)

        [Column(@"PrimaryId", Order = 2, TypeName = "int")]
        [Required]
        [Display(Name = "Primary ID")]
        public int PrimaryId { get; set; } // PrimaryId

        [Column(@"SecondaryId", Order = 3, TypeName = "int")]
        [Required]
        [Display(Name = "Secondary ID")]
        public int SecondaryId { get; set; } // SecondaryId

        // Foreign keys

        /// <summary>
        /// Parent UserInfo pointed by [UserInfoAttributes].([PrimaryId]) (FK_UserInfoAttributes_PrimaryUserInfo)
        /// </summary>
        [ForeignKey("PrimaryId"), Required] public virtual UserInfo Primary { get; set; } // FK_UserInfoAttributes_PrimaryUserInfo

        /// <summary>
        /// Parent UserInfo pointed by [UserInfoAttributes].([SecondaryId]) (FK_UserInfoAttributes_SecondaryUserInfo)
        /// </summary>
        [ForeignKey("SecondaryId"), Required] public virtual UserInfo Secondary { get; set; } // FK_UserInfoAttributes_SecondaryUserInfo
    }

    #endregion

    #region POCO Configuration

    // ColumnNames
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class ColumnNameConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<ColumnName>
    {
        public ColumnNameConfiguration()
            : this("dbo")
        {
        }

        public ColumnNameConfiguration(string schema)
        {
            Property(x => x.C37).IsOptional();
            Property(x => x.C163).IsOptional();
            Property(x => x.C38Test36).IsOptional();
            Property(x => x.Abc4792).IsOptional();
            Property(x => x.Joe46Bloggs).IsOptional();
            Property(x => x.SnakeCase).IsOptional();
            Property(x => x.DefaultTest).IsUnicode(false);
            Property(x => x.Obs).IsOptional().IsUnicode(false);
            Property(x => x.Slash1).IsOptional().IsUnicode(false);
            Property(x => x.Slash2).IsOptional().IsUnicode(false);
            Property(x => x.Slash3).IsOptional().IsUnicode(false);
            Property(x => x.@Static).IsOptional();
            Property(x => x.@Readonly).IsOptional();
            Property(x => x.C123Hi).IsOptional();
            Property(x => x.Afloat).IsOptional();
            Property(x => x.Adouble).IsOptional();
        }
    }

    // Boo
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class Stafford_BooConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Stafford_Boo>
    {
        public Stafford_BooConfiguration()
            : this("Stafford")
        {
        }

        public Stafford_BooConfiguration(string schema)
        {
            Property(x => x.Name).IsFixedLength();
        }
    }

    // ComputedColumns
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class Stafford_ComputedColumnConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Stafford_ComputedColumn>
    {
        public Stafford_ComputedColumnConfiguration()
            : this("Stafford")
        {
        }

        public Stafford_ComputedColumnConfiguration(string schema)
        {
            Property(x => x.MyColumn).IsUnicode(false);
            Property(x => x.MyComputedColumn).IsUnicode(false);
        }
    }

    // Foo
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class Stafford_FooConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Stafford_Foo>
    {
        public Stafford_FooConfiguration()
            : this("Stafford")
        {
        }

        public Stafford_FooConfiguration(string schema)
        {
            Property(x => x.Name).IsFixedLength();

        }
    }

    // Child
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class Synonyms_ChildConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Synonyms_Child>
    {
        public Synonyms_ChildConfiguration()
            : this("Synonyms")
        {
        }

        public Synonyms_ChildConfiguration(string schema)
        {
            Property(x => x.ChildName).IsOptional().IsUnicode(false);

        }
    }

    // Parent
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class Synonyms_ParentConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Synonyms_Parent>
    {
        public Synonyms_ParentConfiguration()
            : this("Synonyms")
        {
        }

        public Synonyms_ParentConfiguration(string schema)
        {
            Property(x => x.ParentName).IsUnicode(false);
        }
    }

    // UserInfo
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class UserInfoConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<UserInfo>
    {
        public UserInfoConfiguration()
            : this("dbo")
        {
        }

        public UserInfoConfiguration(string schema)
        {
        }
    }

    // UserInfoAttributes
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class UserInfoAttributeConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<UserInfoAttribute>
    {
        public UserInfoAttributeConfiguration()
            : this("dbo")
        {
        }

        public UserInfoAttributeConfiguration(string schema)
        {

        }
    }

    #endregion

    #region Stored procedure return models

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class CsvToIntReturnModel
    {
        public System.Int32? IntValue { get; set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.36.1.0")]
    public class Synonyms_SimpleStoredProcReturnModel
    {
        public System.String ReturnValue { get; set; }
    }

    #endregion

}
// </auto-generated>

